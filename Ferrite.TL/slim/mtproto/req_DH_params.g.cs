//  <auto-generated>
//  This file was auto-generated by the Ferrite TL Generator.
//  Please do not modify as all changes will be lost.
//  <auto-generated/>

#nullable enable

using System.Buffers;
using System.Runtime.InteropServices;
using Ferrite.Utils;

namespace Ferrite.TL.slim.mtproto;

public readonly ref struct req_DH_params
{
    private readonly Span<byte> _buff;
    public req_DH_params(Span<byte> buff)
    {
        _buff = buff;
    }
    
    public readonly int Constructor => MemoryMarshal.Read<int>(_buff);

    private void SetConstructor(int constructor)
    {
        MemoryMarshal.Write(_buff.Slice(0, 4), ref constructor);
    }
    public int Length => _buff.Length;
    public ReadOnlySpan<byte> ToReadOnlySpan() => _buff;
    public static Span<byte> Read(Span<byte> data, int offset)
    {
        var bytesRead = GetOffset(7, data[offset..]);
        if (bytesRead > data.Length + offset)
        {
            return Span<byte>.Empty;
        }
        return data.Slice(offset, bytesRead);
    }

    public static int GetRequiredBufferSize(int len_p, int len_q, int len_encrypted_data)
    {
        return 4 + 16 + 16 + BufferUtils.CalculateTLBytesLength(len_p) + BufferUtils.CalculateTLBytesLength(len_q) + 8 + BufferUtils.CalculateTLBytesLength(len_encrypted_data);
    }
    public static req_DH_params Create(ReadOnlySpan<byte> nonce, ReadOnlySpan<byte> server_nonce, ReadOnlySpan<byte> p, ReadOnlySpan<byte> q, long public_key_fingerprint, ReadOnlySpan<byte> encrypted_data, out IMemoryOwner<byte> memory, MemoryPool<byte>? pool = null)
    {
        var length = GetRequiredBufferSize(p.Length, q.Length, encrypted_data.Length);
        memory = pool != null ? pool.Rent(length) : MemoryPool<byte>.Shared.Rent(length);
        memory.Memory.Span.Clear();
        var obj = new req_DH_params(memory.Memory.Span[..length]);
        obj.SetConstructor(unchecked((int)0xd712e4be));
        obj.Set_nonce(nonce);
        obj.Set_server_nonce(server_nonce);
        obj.Set_p(p);
        obj.Set_q(q);
        obj.Set_public_key_fingerprint(public_key_fingerprint);
        obj.Set_encrypted_data(encrypted_data);
        return obj;
    }
    public static int ReadSize(Span<byte> data, int offset)
    {
        return GetOffset(7, data[offset..]);
    }
    public ReadOnlySpan<byte> nonce => _buff.Slice(GetOffset(1, _buff), 16);
    private void Set_nonce(ReadOnlySpan<byte> value)
    {
        if(value.Length != 16)
        {
            return;
        }
        value.CopyTo(_buff.Slice(GetOffset(1, _buff), 16));
    }
    public ReadOnlySpan<byte> server_nonce => _buff.Slice(GetOffset(2, _buff), 16);
    private void Set_server_nonce(ReadOnlySpan<byte> value)
    {
        if(value.Length != 16)
        {
            return;
        }
        value.CopyTo(_buff.Slice(GetOffset(2, _buff), 16));
    }
    public ReadOnlySpan<byte> p => BufferUtils.GetTLBytes(_buff, GetOffset(3, _buff));
    private void Set_p(ReadOnlySpan<byte> value)
    {
        if(value.Length == 0)
        {
            return;
        }
        var offset = GetOffset(3, _buff);
        var lenBytes = BufferUtils.WriteLenBytes(_buff, value, offset);
        if(_buff.Length < offset + lenBytes + value.Length) return;
        value.CopyTo(_buff[(offset + lenBytes)..]);
    }
    public ReadOnlySpan<byte> q => BufferUtils.GetTLBytes(_buff, GetOffset(4, _buff));
    private void Set_q(ReadOnlySpan<byte> value)
    {
        if(value.Length == 0)
        {
            return;
        }
        var offset = GetOffset(4, _buff);
        var lenBytes = BufferUtils.WriteLenBytes(_buff, value, offset);
        if(_buff.Length < offset + lenBytes + value.Length) return;
        value.CopyTo(_buff[(offset + lenBytes)..]);
    }
    public readonly long public_key_fingerprint => MemoryMarshal.Read<long>(_buff[GetOffset(5, _buff)..]);
    private void Set_public_key_fingerprint(long value)
    {
        MemoryMarshal.Write(_buff[GetOffset(5, _buff)..], ref value);
    }
    public ReadOnlySpan<byte> encrypted_data => BufferUtils.GetTLBytes(_buff, GetOffset(6, _buff));
    private void Set_encrypted_data(ReadOnlySpan<byte> value)
    {
        if(value.Length == 0)
        {
            return;
        }
        var offset = GetOffset(6, _buff);
        var lenBytes = BufferUtils.WriteLenBytes(_buff, value, offset);
        if(_buff.Length < offset + lenBytes + value.Length) return;
        value.CopyTo(_buff[(offset + lenBytes)..]);
    }
    private static int GetOffset(int index, Span<byte> buffer)
    {
        int offset = 4;
        if(index >= 2) offset += 16;
        if(index >= 3) offset += 16;
        if(index >= 4) offset += BufferUtils.GetTLBytesLength(buffer, offset);
        if(index >= 5) offset += BufferUtils.GetTLBytesLength(buffer, offset);
        if(index >= 6) offset += 8;
        if(index >= 7) offset += BufferUtils.GetTLBytesLength(buffer, offset);
        return offset;
    }
}
