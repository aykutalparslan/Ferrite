//  <auto-generated>
//  This file was auto-generated by the Ferrite TL Generator.
//  Please do not modify as all changes will be lost.
//  <auto-generated/>

#nullable enable

using System.Buffers;
using System.Runtime.InteropServices;
using Ferrite.Utils;

namespace Ferrite.TL.slim.mtproto;

public readonly ref struct bind_auth_key_inner
{
    private readonly Span<byte> _buff;
    public bind_auth_key_inner(Span<byte> buff)
    {
        _buff = buff;
    }
    
    public readonly int Constructor => MemoryMarshal.Read<int>(_buff);

    private void SetConstructor(int constructor)
    {
        MemoryMarshal.Write(_buff.Slice(0, 4), ref constructor);
    }
    public int Length => _buff.Length;
    public ReadOnlySpan<byte> ToReadOnlySpan() => _buff;
    public static Span<byte> Read(Span<byte> data, int offset)
    {
        var bytesRead = GetOffset(6, data[offset..]);
        if (bytesRead > data.Length + offset)
        {
            return Span<byte>.Empty;
        }
        return data.Slice(offset, bytesRead);
    }

    public static int GetRequiredBufferSize()
    {
        return 4 + 8 + 8 + 8 + 8 + 4;
    }
    public static bind_auth_key_inner Create(long nonce, long temp_auth_key_id, long perm_auth_key_id, long temp_session_id, int expires_at, out IMemoryOwner<byte> memory, MemoryPool<byte>? pool = null)
    {
        var length = GetRequiredBufferSize();
        memory = pool != null ? pool.Rent(length) : MemoryPool<byte>.Shared.Rent(length);
        memory.Memory.Span.Clear();
        var obj = new bind_auth_key_inner(memory.Memory.Span[..length]);
        obj.SetConstructor(unchecked((int)0x75a3f765));
        obj.Set_nonce(nonce);
        obj.Set_temp_auth_key_id(temp_auth_key_id);
        obj.Set_perm_auth_key_id(perm_auth_key_id);
        obj.Set_temp_session_id(temp_session_id);
        obj.Set_expires_at(expires_at);
        return obj;
    }
    public static int ReadSize(Span<byte> data, int offset)
    {
        return GetOffset(6, data[offset..]);
    }
    public readonly long nonce => MemoryMarshal.Read<long>(_buff[GetOffset(1, _buff)..]);
    private void Set_nonce(long value)
    {
        MemoryMarshal.Write(_buff[GetOffset(1, _buff)..], ref value);
    }
    public readonly long temp_auth_key_id => MemoryMarshal.Read<long>(_buff[GetOffset(2, _buff)..]);
    private void Set_temp_auth_key_id(long value)
    {
        MemoryMarshal.Write(_buff[GetOffset(2, _buff)..], ref value);
    }
    public readonly long perm_auth_key_id => MemoryMarshal.Read<long>(_buff[GetOffset(3, _buff)..]);
    private void Set_perm_auth_key_id(long value)
    {
        MemoryMarshal.Write(_buff[GetOffset(3, _buff)..], ref value);
    }
    public readonly long temp_session_id => MemoryMarshal.Read<long>(_buff[GetOffset(4, _buff)..]);
    private void Set_temp_session_id(long value)
    {
        MemoryMarshal.Write(_buff[GetOffset(4, _buff)..], ref value);
    }
    public readonly int expires_at => MemoryMarshal.Read<int>(_buff[GetOffset(5, _buff)..]);
    private void Set_expires_at(int value)
    {
        MemoryMarshal.Write(_buff[GetOffset(5, _buff)..], ref value);
    }
    private static int GetOffset(int index, Span<byte> buffer)
    {
        int offset = 4;
        if(index >= 2) offset += 8;
        if(index >= 3) offset += 8;
        if(index >= 4) offset += 8;
        if(index >= 5) offset += 8;
        if(index >= 6) offset += 4;
        return offset;
    }
}
